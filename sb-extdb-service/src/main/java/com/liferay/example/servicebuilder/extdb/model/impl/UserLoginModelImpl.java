/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.example.servicebuilder.extdb.model.impl;

import com.liferay.example.servicebuilder.extdb.model.UserLogin;
import com.liferay.example.servicebuilder.extdb.model.UserLoginModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserLogin service. Represents a row in the &quot;ExtDB_UserLogin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>UserLoginModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserLoginImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserLoginImpl
 * @generated
 */
public class UserLoginModelImpl
	extends BaseModelImpl<UserLogin> implements UserLoginModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user login model instance should use the <code>UserLogin</code> interface instead.
	 */
	public static final String TABLE_NAME = "ExtDB_UserLogin";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"screenName", Types.VARCHAR},
		{"systemName", Types.VARCHAR}, {"lastLogin", Types.TIMESTAMP},
		{"totalLogins", Types.BIGINT},
		{"longestTimeBetweenLogins", Types.BIGINT},
		{"shortestTimeBetweenLogins", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("systemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastLogin", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalLogins", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("longestTimeBetweenLogins", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shortestTimeBetweenLogins", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ExtDB_UserLogin (uuid_ VARCHAR(75) not null primary key,screenName VARCHAR(75) null,systemName VARCHAR(75) null,lastLogin DATE null,totalLogins LONG,longestTimeBetweenLogins LONG,shortestTimeBetweenLogins LONG)";

	public static final String TABLE_SQL_DROP = "drop table ExtDB_UserLogin";

	public static final String ORDER_BY_JPQL = " ORDER BY userLogin.uuid ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ExtDB_UserLogin.uuid_ ASC";

	public static final String DATA_SOURCE = "extDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.example.servicebuilder.extdb.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.com.liferay.example.servicebuilder.extdb.model.UserLogin"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.example.servicebuilder.extdb.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.com.liferay.example.servicebuilder.extdb.model.UserLogin"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.example.servicebuilder.extdb.service.util.PropsUtil.get(
			"lock.expiration.time.com.liferay.example.servicebuilder.extdb.model.UserLogin"));

	public UserLoginModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _uuid;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setUuid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uuid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserLogin.class;
	}

	@Override
	public String getModelClassName() {
		return UserLogin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserLogin, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserLogin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserLogin, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((UserLogin)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserLogin, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserLogin, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserLogin)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserLogin, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserLogin, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserLogin>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserLogin.class.getClassLoader(), UserLogin.class,
			ModelWrapper.class);

		try {
			Constructor<UserLogin> constructor =
				(Constructor<UserLogin>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<UserLogin, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserLogin, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserLogin, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserLogin, Object>>();
		Map<String, BiConsumer<UserLogin, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserLogin, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(UserLogin userLogin, Object uuidObject) {
					userLogin.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"screenName",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getScreenName();
				}

			});
		attributeSetterBiConsumers.put(
			"screenName",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(
					UserLogin userLogin, Object screenNameObject) {

					userLogin.setScreenName((String)screenNameObject);
				}

			});
		attributeGetterFunctions.put(
			"systemName",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getSystemName();
				}

			});
		attributeSetterBiConsumers.put(
			"systemName",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(
					UserLogin userLogin, Object systemNameObject) {

					userLogin.setSystemName((String)systemNameObject);
				}

			});
		attributeGetterFunctions.put(
			"lastLogin",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getLastLogin();
				}

			});
		attributeSetterBiConsumers.put(
			"lastLogin",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(
					UserLogin userLogin, Object lastLoginObject) {

					userLogin.setLastLogin((Date)lastLoginObject);
				}

			});
		attributeGetterFunctions.put(
			"totalLogins",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getTotalLogins();
				}

			});
		attributeSetterBiConsumers.put(
			"totalLogins",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(
					UserLogin userLogin, Object totalLoginsObject) {

					userLogin.setTotalLogins((Long)totalLoginsObject);
				}

			});
		attributeGetterFunctions.put(
			"longestTimeBetweenLogins",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getLongestTimeBetweenLogins();
				}

			});
		attributeSetterBiConsumers.put(
			"longestTimeBetweenLogins",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(
					UserLogin userLogin,
					Object longestTimeBetweenLoginsObject) {

					userLogin.setLongestTimeBetweenLogins(
						(Long)longestTimeBetweenLoginsObject);
				}

			});
		attributeGetterFunctions.put(
			"shortestTimeBetweenLogins",
			new Function<UserLogin, Object>() {

				@Override
				public Object apply(UserLogin userLogin) {
					return userLogin.getShortestTimeBetweenLogins();
				}

			});
		attributeSetterBiConsumers.put(
			"shortestTimeBetweenLogins",
			new BiConsumer<UserLogin, Object>() {

				@Override
				public void accept(
					UserLogin userLogin,
					Object shortestTimeBetweenLoginsObject) {

					userLogin.setShortestTimeBetweenLogins(
						(Long)shortestTimeBetweenLoginsObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_uuid = uuid;
	}

	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@Override
	public String getSystemName() {
		if (_systemName == null) {
			return "";
		}
		else {
			return _systemName;
		}
	}

	@Override
	public void setSystemName(String systemName) {
		_systemName = systemName;
	}

	@Override
	public Date getLastLogin() {
		return _lastLogin;
	}

	@Override
	public void setLastLogin(Date lastLogin) {
		_lastLogin = lastLogin;
	}

	@Override
	public long getTotalLogins() {
		return _totalLogins;
	}

	@Override
	public void setTotalLogins(long totalLogins) {
		_totalLogins = totalLogins;
	}

	@Override
	public long getLongestTimeBetweenLogins() {
		return _longestTimeBetweenLogins;
	}

	@Override
	public void setLongestTimeBetweenLogins(long longestTimeBetweenLogins) {
		_longestTimeBetweenLogins = longestTimeBetweenLogins;
	}

	@Override
	public long getShortestTimeBetweenLogins() {
		return _shortestTimeBetweenLogins;
	}

	@Override
	public void setShortestTimeBetweenLogins(long shortestTimeBetweenLogins) {
		_shortestTimeBetweenLogins = shortestTimeBetweenLogins;
	}

	@Override
	public UserLogin toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserLogin>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserLoginImpl userLoginImpl = new UserLoginImpl();

		userLoginImpl.setUuid(getUuid());
		userLoginImpl.setScreenName(getScreenName());
		userLoginImpl.setSystemName(getSystemName());
		userLoginImpl.setLastLogin(getLastLogin());
		userLoginImpl.setTotalLogins(getTotalLogins());
		userLoginImpl.setLongestTimeBetweenLogins(
			getLongestTimeBetweenLogins());
		userLoginImpl.setShortestTimeBetweenLogins(
			getShortestTimeBetweenLogins());

		userLoginImpl.resetOriginalValues();

		return userLoginImpl;
	}

	@Override
	public int compareTo(UserLogin userLogin) {
		String primaryKey = userLogin.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserLogin)) {
			return false;
		}

		UserLogin userLogin = (UserLogin)obj;

		String primaryKey = userLogin.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UserLogin> toCacheModel() {
		UserLoginCacheModel userLoginCacheModel = new UserLoginCacheModel();

		userLoginCacheModel.uuid = getUuid();

		String uuid = userLoginCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userLoginCacheModel.uuid = null;
		}

		userLoginCacheModel.screenName = getScreenName();

		String screenName = userLoginCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			userLoginCacheModel.screenName = null;
		}

		userLoginCacheModel.systemName = getSystemName();

		String systemName = userLoginCacheModel.systemName;

		if ((systemName != null) && (systemName.length() == 0)) {
			userLoginCacheModel.systemName = null;
		}

		Date lastLogin = getLastLogin();

		if (lastLogin != null) {
			userLoginCacheModel.lastLogin = lastLogin.getTime();
		}
		else {
			userLoginCacheModel.lastLogin = Long.MIN_VALUE;
		}

		userLoginCacheModel.totalLogins = getTotalLogins();

		userLoginCacheModel.longestTimeBetweenLogins =
			getLongestTimeBetweenLogins();

		userLoginCacheModel.shortestTimeBetweenLogins =
			getShortestTimeBetweenLogins();

		return userLoginCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserLogin, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserLogin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserLogin, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserLogin)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserLogin, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserLogin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserLogin, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserLogin)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserLogin>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _screenName;
	private String _systemName;
	private Date _lastLogin;
	private long _totalLogins;
	private long _longestTimeBetweenLogins;
	private long _shortestTimeBetweenLogins;
	private UserLogin _escapedModel;

}